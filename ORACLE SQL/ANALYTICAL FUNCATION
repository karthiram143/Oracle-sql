-- ANALYTICAL FUNCATION 
-- RANK
-- OVER ALL PUT RANK
SELECT FIRST_NAME, LAST_NAME, SALARY,DEPARTMENT_ID, 
RANK() OVER (ORDER BY SALARY DESC) AS RANK
FROM EMPLOYEE

RESULT:
FIRST_NAME	LAST_NAME	SALARY	DEPARTMENT_ID	RANK
Matthew	Martin	75000	70	1
Emily	Davis	72000	30	2
Susan	Taylor	72000	30	2
Emily	Davis	72000	30	2
Kevin	Thomas	68000	60	5
Lisa	Lopez	67000	20	6
-- DEPARTMENT BASED RANK
SELECT FIRST_NAME, LAST_NAME, SALARY,DEPARTMENT_ID, 
RANK() OVER (PARTITION BY DEPARTMENT_ID  ORDER BY SALARY DESC) AS RANK
FROM EMPLOYEE

RESULT:
FIRST_NAME	LAST_NAME	SALARY	DEPARTMENT_ID	RANK
John	Doe	55000	10	1
John	Doe	55000	10	1
Karen	Moore	49000	10	3
Robert	Johnson	48000	10	4
Robert	Johnson	48000	10	4
James	Miller	47000	10	6
-- DENSE RANK
SELECT FIRST_NAME, LAST_NAME, SALARY,DEPARTMENT_ID, 
DENSE_RANK() OVER (ORDER BY SALARY DESC) AS RANK
FROM EMPLOYEE
RESULT:
FIRST_NAME	LAST_NAME	SALARY	DEPARTMENT_ID	RANK
Matthew	Martin	75000	70	1
Emily	Davis	72000	30	2
Susan	Taylor	72000	30	2
Emily	Davis	72000	30	2
Kevin	Thomas	68000	60	3
Lisa	Lopez	67000	20	4

-- DEPARTMENT BASED RANK
SELECT FIRST_NAME, LAST_NAME, SALARY,DEPARTMENT_ID, 
DENSE_RANK() OVER (PARTITION BY DEPARTMENT_ID  ORDER BY SALARY DESC) AS RANK
FROM EMPLOYEE

RESULT:
FIRST_NAME	LAST_NAME	SALARY	DEPARTMENT_ID	RANK
John	Doe	55000	10	1
John	Doe	55000	10	1
Karen	Moore	49000	10	2
Robert	Johnson	48000	10	3
Robert	Johnson	48000	10	3
James	Miller	47000	10	4
James	Miller	47000	10	4
Lisa	Lopez	67000	20	1
Linda	Garcia	66000	20	2
Linda	Garcia	66000	20	2
Jane	Smith	62000	20	3
Jane	Smith	62000	20	3
Daniel	Hernandez	50000	20	4

-- LEAD
it returns value from next row in the table
-- syntax:
SELECT LEAD(expression,offset)
OVER(ORDER BY ORDER COLUMN ASC|DESC)
FROM THE TABLE 
-- EXAMPLE:
SELECT FIRST_NAME, LAST_NAME,DEPARTMENT_ID, SALARY,
LEAD(SALARY,1) OVER (  ORDER BY SALARY DESC) AS RANK
FROM EMPLOYEE
-- RESULT:
FIRST_NAME	LAST_NAME	DEPARTMENT_ID	SALARY	RANK
Matthew	Martin	70	75000	72000
Emily	Davis	30	72000	72000
Susan	Taylor	30	72000	72000
Emily	Davis	30	72000	68000
Kevin	Thomas	60	68000	67000

-- LAG
it returns value from privious row in the table
-- syntax:
SELECT LAG(expression,offset)
OVER(ORDER BY ORDER COLUMN ASC|DESC)
FROM THE TABLE 
-- EXAMPLE:
SELECT FIRST_NAME, LAST_NAME,DEPARTMENT_ID, SALARY,
LAG(SALARY,1) OVER (  ORDER BY SALARY DESC) AS RANK
FROM EMPLOYEE
-- RESULT:
FIRST_NAME	LAST_NAME	DEPARTMENT_ID	SALARY	RANK
Matthew	Martin	70	75000	-
Emily	Davis	30	72000	75000
Susan	Taylor	30	72000	72000
Emily	Davis	30	72000	72000
Kevin	Thomas	60	68000	72000

-- FIRST_VALUE
used to returns the first value an ordered set values
-- syn:
FIRST_VALUE(column_name) 
OVER (
    [PARTITION BY partition_column]
    ORDER BY order_column [ASC | DESC]
    [ROWS BETWEEN ...]
)
-- example
SELECT  DISTINCT FIRST_VALUE(SALARY) OVER (ORDER BY SALARY DESC
RANGE BETWEEN UNBOUNDED PRECEDING  AND UNBOUNDED FOLLOWING)
FROM EMPLOYEE
-- RESULT
75000

-- LAST_VALUE (to see the last value under the table )
used to returns the Last value an ordered set values
-- syn:
LAST_VALUE(column_name) 
OVER (
    [PARTITION BY partition_column]
    ORDER BY order_column [ASC | DESC]
    [ROWS BETWEEN ...]
)
-- example
SELECT  UNIQUE LAST_VALUE(SALARY) OVER (ORDER BY SALARY DESC
RANGE BETWEEN UNBOUNDED PRECEDING  AND UNBOUNDED FOLLOWING)
FROM EMPLOYEE
-- RESULT
47000

-- Nth VLAUE
Specfic position in the anaylitcal window
-- syn:
NTH_VALUE(column_name,n) 
OVER (
    [PARTITION BY partition_column]
    ORDER BY order_column [ASC | DESC]
    [ROWS BETWEEN ...]
)
-- example
SELECT  UNIQUE NTH_VALUE(SALARY,5) OVER (ORDER BY SALARY DESC
RANGE BETWEEN UNBOUNDED PRECEDING  AND UNBOUNDED FOLLOWING)
FROM EMPLOYEE
-- RESULT
68000
