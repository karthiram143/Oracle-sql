-- Sql functions:
SQL functions must return values
manipulate output data
perform calculation on data
-- DUAL TABLE( pre defined table to given oralce):
 Contains one column and one row with the value X
 it can be accessed by all users in the DB
It is also called as dummy table -- 1 row , 1 column called dual table
ex: 
SELECT 1 FROM DUAL
-- result:
1-column
1- data
-- ex-2:
SELECT 1+5 FROM DUAL
-- result:
1+5
6

-- TYPE OF SQL FUNCATION
 1.Single row function 
 2.Multi row function
--  MULTI ROW FUNCATION
  Work upon group of rows and return one result for the complete set of rows
  it also as aggregate function or group function

--   SINGLE ROW function
  work on single row and return one output per row
  accept arguments and return one value
  can be used as a nested function
--   SYN:
function_name [arumnet1, argument-2]
-- type of single row function
1. General function/Null function
2.character function/ string function
3.number function
4.date function
5.conversion function

                    -- 1.NULL FUNCTION 
 Null function work with any data type
 null is. Not equal to null
 null is not equal to space or null is not a space
 null is null

--  type of null function
1.NVL FUNCTION
2.NVL2 FUNCTION
3.NULLIF FUNCTION
4.COAESE FUCNTION

1.NVL functionit accepts only two arguments if 1st argument is NULL then prints the 2nd argument
-- syn:
NVL(argumnet1, arugumnet 2)
-- ex:
select NVL(NULL,50) from dual
o/p 
50
ex-2:
select manger_id, nvl(manger_id,10) from employee

            --   2.NVL2 FUNCTION
If accepts only three arguments if 1st argument is null then prints the 3rd argument else print the 2nd argument
-- SYN:
NLV2( arugment 1, argument2,argument3)
-- ex:
SELECT NVL2(NULL,50,7) FROM DUAL
Result:7
-- ex
:select NVL2( 1,50,7) FROM DUAL
RESULT:
50
-- EX:3
SELECT DEPARTMENT_ID ,NVL2(DEPARTMENT_ID,1,0.5) FROM EMPLOYEE

                     ---3.NULLIF FUNCTION
 If accepts only two arguments if both arguments are same then prints null else prints the 1st aruguments
--  SYN:
NULIF ( argument1, argument2)
-- ex:
SELECT NULLIF(50,50) FROM DUAL
Result: NULL
-- ex:
select NULLIF( 5,50) FROM DUAL
RESULT: to print 1st arugment 
5
-- EX:4
select NULLIF( null,null) FROM DUAL -- for both argumnet we are not given the null it thorugh error(not)
select NULLIF( 50,null) FROM DUAL RESULT:50 -- for both argumnet we are given the null it thorugh error(yes)
select NULLIF( NULL,1) FROM DUAL -- for both argumnet we are NOT given the null it thorugh error(NOT)

         --    4.COALLESE FUNCTION
It print the 1st not null value it accepts (n) no of columns
-- SYN:
COALESE( arguments1,arum2 ….argument(n)
-- ex:
SELECT COALESCE(NULL,NULL,NULL,50,NULL,70) FROM DUAL-- it checking one by one arugment , where is getting is not null value to show the reuslt
Result: 50


                          ---2. String function
 1. LENGTH -- used to find the length of the argument 
SYN: LENGTH (arg1)
-- EX:
Select FIRST_NAME,LENGTH(FIRST_NAME) FROM EMPLOYEE
-- RESULT:( length of the charcher a,n,t,h,o,n,y -total -7 )
FIRST_NAME	LENGTH(FIRST_NAME)
Anthony	7
Barbara	7
Barbara	7

 2. REVERSE -- used the resverse of the argument 
 SYN: REVERSE (arg1)
-- EX:
Select FIRST_NAME,REVERSE(FIRST_NAME) FROM EMPLOYEE
-- RESULT:
FIRST_NAME	REVERSE(FIRST_NAME)
Anthony	ynohtnA
Barbara	arabraB

 3. SUBSTR -- Used to get the specifics portion of the argum
SYN: SUBSTR (argument, srart_position, no of length)
-- ex:
Select FIRST_NAME,SUBSTR(FIRST_NAME,1,3) FROM EMPLOYEE
-- result:
FIRST_NAME	SUBSTR(FIRST_NAME,1,3)
Anthony	Ant
Barbara	Bar
Select FIRST_NAME,SUBSTR(FIRST_NAME,-1,3) FROM EMPLOYEE

FIRST_NAME	SUBSTR(FIRST_NAME,-1,3)
Anthony	y
Barbara	a

  4.INSTR
Used to get the exact position of the arguments
always returns a numeric values
if searching string is not found then it will return0
if string is NULL or teaching string is NULL, then it will return null
-- SYN:
INSTR ( argument , seaching_string, starting position, nth aprrerance)
EX:
SELECT FIRST_NAME, INSTR(FIRST_NAME,'n',1,1) from employee
FIRST_NAME	INSTR(FIRST_NAME,'N',1,1)
Anthony	2
Barbara	0
Barbara	0
-- explanination:Anthony is check n letter check where is 1st is straring and after 1 is 1st come of n if i am giveing to 2 means values is deffert
SELECT FIRST_NAME, INSTR(FIRST_NAME,'n',1,2) from employee
FIRST_NAME	INSTR(FIRST_NAME,'N',1,2) - 6th position is coming that place only 2nd n is there so
Anthony	6
ex: SELECT FIRST_NAME, INSTR(NULL,'n',1,2) from employee---if the argumnet has been null the full thing has been null
RESULT:
FIRST_NAME	INSTR(NULL,'N',1,2)
Anthony	-
Barbara	-
EX2:  SELECT FIRST_NAME, INSTR(FIRST_NAME,NULL,1,2) from employee-- i for the seraching string is null the full thing has been null

 
  4.REPLACE
Used to replace the charter with another set of characters
-- SYN:
 REPLACE ( argument , replace_what, replace_with)
-- EX:
SELECT FIRST_NAME, REPLACE(FIRST_NAME,'n','X') from employee
FIRST_NAME	REPLACE(FIRST_NAME,'N','X')
Anthony	AXthoXy
Barbara	Barbara

  5.TRANSLATE
  used to translate the chartered with another set of characters 
  -- SYN:
 TRANSLATE ( argument , translate_what, translate_with)
--  EX:
SELECT  TRANSLATE('ABCDE','AB',12) from dual
o/p:12CDE
SELECT  TRANSLATE('ABCDEBSCA','AB',12) from dual
RESULT: 12CDE2SC1
1. SELECT  TRANSLATE('ABCDE','AB',123) from dual. --12CDE -- HERE INNORE THE 3 it translate 1,2
2. SELECT  TRANSLATE('ABCDE','AB',1) from dual 1CDE -- HERE i am not provide the B to translae so for the it remove the B for the stirng

LPAD - left pad
used to pads the left side of a string with a specific set of characters
-- syn:
LPAD ( argument , padded_length, pacing_string)
-- EX:
SELECT FIRST_NAME, LPAD(FIRST_NAME,15,'*') from employee
-- result:
FIRST_NAME	LPAD(FIRST_NAME,15,'*')
Anthony	********Anthony -- total count -15
Barbara	********Barbara
RPAD
-- syn:
RPAD ( argument , padded_length, pacing_string)
ex 2: RPAD- right pad
SELECT FIRST_NAME, RPAD(FIRST_NAME,15,'*') from employee
-- RESULT:
FIRST_NAME	RPAD(FIRST_NAME,15,'*')
Anthony	Anthony********
Barbara	Barbara********

LTRIM
Used to trim a character form the left side of th a string
  -- SYN:
LTRIM ( argument , translate_what, translate_with)
--  EX:
SELECT FIRST_NAME, LTRIM(FIRST_NAME,'A') from employee-- REMOVED THE A
RESULT:
FIRST_NAME	LTRIM(FIRST_NAME,'A')
Anthony	nthony
Barbara	Barbara
LTRIM
Used to trim a character form the right side of th a string
  -- SYN:
RTRIM ( argument , translate_what, translate_with)
--  EX:
SELECT FIRST_NAME, RTRIM(FIRST_NAME,'a') from employee-- REMOVED THE A
RESULT:
FIRST_NAME	RTRIM(FIRST_NAME,'A')
Anthony	Anthony
Barbara	Barbar-- here its removed the a

TRIM
Used to trim a character from  string(for both side)
  -- SYN:
TRIM ( LEADING(front)| TRALING(back)|BOTH , triming chacheter from argument)
--  EX:
SELECT FIRST_NAME, TRIM(LEADING 'A' FROM FIRST_NAME) from employee-- REMOVED THE A
FIRST_NAME	TRIM(LEADING'A'FROMFIRST_NAME)
Anthony	nthony

-- EX :2
SELECT FIRST_NAME, TRIM(TRAILING 'y' FROM FIRST_NAME) from employee-- REMOVED THE y
-- result:
FIRST_NAME	TRIM(TRAILING'Y'FROMFIRST_NAME)
Anthony	Anthon

-- EX:3
SELECT TRIM(BOTH 'm' FROM 'malayalam') from DUAL-- REMOVED THE m both side
result: 
TRIM(BOTH'M'FROM'MALAYALAM')
alayala

LOWER
 -Used to convert the set of characters into a lower case
LOWER (argument)
-- ex:
SELECT FIRST_NAME, LOWER(FIRST_NAME) from employee
Result:
FIRST_NAME	LOWER(FIRST_NAME)
Anthony	anthony

UPPER 
-Used to convert the set of characters into a UPPER case
UPPER (argument)
SELECT FIRST_NAME, UPPER(FIRST_NAME) from employee
O/P:
FIRST_NAME	UPPER(FIRST_NAME)
Anthony	ANTHONY

INITCAP
Used to convert the initial character to upper in the set of characters
INTICAP(argument)
-- ex:
SELECT INITCAP ('karthikeyan') from dual
o/p:
INITCAP('KARTHIKEYAN')
Karthikeyan


                                     -- NUMBER FUNCTION
ROUND — used to round the of decimal value to a certain number
ROUND(N,(D))— N(D) is optional
EX:
Select round(43.456,2) from dual--43.46
TRUNC - used to truncate a number to a specified number of decimal places
SYN:
TRUNC(N,(D))— N(D) is optional

EX:
Select TRUNC(43.456,2) from dual--43.45
FLOOR - Used to return the whole number equal to or less than a specified number
SYN: FLOOR (N)
EX:
Select FLOOR(43.456) from dual--43
Select FLOOR(43.9999) from dual--43 ONLY CONSIDER THE BASE VALUE

CEIL - Used to return the whole number equal to or greater than a specified number
Select CEIL(43.9999) from dual--44. gratest whole number it give
Select CEIL(43.0001) from dual--44

MOD -used to return the modulus of a number
SYN:MOD (N,(M))
Select MOD(25,5) from duaL--O after dividing remainder 
Select MOD(25,2) from duaL--1 after dividing remainder 

ABS - used to calculate the absolute value of an expression 
ABS(N)— to get the if I am give negative it change into positive
Select ABS(258) from duaL--258
Select ABS(-258) from duaL--258

SIGN -Used to fine the +ve and -ve values
syn: SIGN(N)
Select SIGN(258) from duaL --1 if the value 1 means positive one , if neagiative -1
Select SIGN(-258) from duaL. -1

POWER — Used to power up the value with another values 
POWER(M,N)
Select POWER(2,2) from duaL--4, 2*2 MEANS 4, 2ND IS CONSIDER AS POWER OF WHICH VALUE
Select POWER(2,3) from duaL--8 , 2*2*2

SQRT — used to get the square root of the  given number
SQRT(N)
Select SQRT(25) from duaL--5 to sequare root for 25 is 5 ,not put the neagtive values it throguh erorr



                                            --DATA FUNCTION
Select SYSDATE from dual--9/6/2025

ADD_MONTHS — 
used to add number of months(n)
syn: ADD_MONTHS(date expression, month)
ex: 
SELECT ADD_MONTHS(SYSDATE,2) from dual-- to inducle 2 months
o/p--11/6/2025
possible to give the negative months 
SELECT ADD_MONTHS(SYSDATE,-2) from dual
-- RESULT:
7/6/2025
-- EX-2
SELECT ADD_MONTHS(DATE '2025-08-6',-2) from dual--6/6/2025 ONLY LIKE THIS FOMAT OF YYYY-MM-DD

MONTHS_BETWEEN—Used to get the number of months between two dates
syn:MONTHS_BETWEEN(start_date,end_date)
ex:
SELECT MONTHS_BETWEEN(DATE '2025-08-6',DATE '2025-09-6') FROM DUAL-- (-1)
YOU WANT TO SHOW THE POSTIVE VALUES
SELECT ABS(MONTHS_BETWEEN(DATE '2025-08-6',DATE '2025-09-6')) FROM DUAL-- (1)

NEXT_DAY— used to get the date of the weekday specified by day name
sun: NEXT_DAY(date, weekday)
-- ex:
SELECT NEXT_DAY(SYSDATE,'SUNDAY') FROM DUAL--9/7/2025( coming sunday, it comes only 7days between it came)

LAST_DAY — used to get the last day o the month
LAST_DAY(DATE)
EX:
SELECT LAST_DAY(SYSDATE) FROM DUAL--9/30/2025 is the last date for this month
SELECT LAST_DAY(DATE '2025-02-6') FROM DUAL-2/28/2025-- feb month of last date

ROUND -used to round the date to a specific unit.
ROUND (date, format)
-- ex: ( today i am in SATDERDAY date-sep-6-2025 )
SELECT ROUND(SYSDATE,'DAY') FROM DUAL--9/7/2025--it showing the future sunday or coming sunday 
** ORACLE 1ST DAY is SUNDAY if the day comes like 
1.(MONDAY,TUESDAY, WEDNESDAY) it came as -last sunday date
2.(TURSDAY,FRIDAY,SATDERDAY) It came as -coming sunday date is shown
SELECT ROUND(date '2025-08-01','DAY') FROM DUAL--8/3/2025
-- use the month as well
1.1st 15 days of the come it came as -1st day date
2.16 to 30 days  It came as -next month of start day date or next month start date 
SELECT ROUND(DATE'2025-08-6','MONTH') FROM DUAL--8/1/2025  i am in day -6
SELECT ROUND(DATE'2025-08-25','MONTH') FROM DUAL--9/1/2025 NEXT month 1st date

TRUNC —used to truncate the date to a specifc unit
SYN: TRUNC(date, format)
SELECT TRUNC(DATE'2025-08-1','MONTH') FROM DUAL--8/1/2025
SELECT TRUNC(DATE'2025-08-25','MONTH') FROM DUAL--8/1/2025. for this  not a round of 
    **month of starting date, 
    **year is year of starting date,
    **day completed the 1st sunday
